/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    attractions: Attraction;
    events: Event;
    segments: Segment;
    venues: Venue;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    attractions: AttractionsSelect<false> | AttractionsSelect<true>;
    events: EventsSelect<false> | EventsSelect<true>;
    segments: SegmentsSelect<false> | SegmentsSelect<true>;
    venues: VenuesSelect<false> | VenuesSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "attractions".
 */
export interface Attraction {
  id: string;
  name: string;
  type?: string | null;
  url?: string | null;
  locale?: string | null;
  externalLinks?: {
    youtube?:
      | {
          url?: string | null;
          id?: string | null;
        }[]
      | null;
    twitter?:
      | {
          url?: string | null;
          id?: string | null;
        }[]
      | null;
    itunes?:
      | {
          url?: string | null;
          id?: string | null;
        }[]
      | null;
    lastfm?:
      | {
          url?: string | null;
          id?: string | null;
        }[]
      | null;
    spotify?:
      | {
          url?: string | null;
          id?: string | null;
        }[]
      | null;
    facebook?:
      | {
          url?: string | null;
          id?: string | null;
        }[]
      | null;
    wiki?:
      | {
          url?: string | null;
          id?: string | null;
        }[]
      | null;
    instagram?:
      | {
          url?: string | null;
          id?: string | null;
        }[]
      | null;
    musicbrainz?:
      | {
          id?: string | null;
          url?: string | null;
        }[]
      | null;
    homepage?:
      | {
          url?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  aliases?:
    | {
        alias?: string | null;
        id?: string | null;
      }[]
    | null;
  images?:
    | {
        ratio?: string | null;
        url?: string | null;
        width?: number | null;
        height?: number | null;
        fallback?: boolean | null;
        attribution?: string | null;
        id?: string | null;
      }[]
    | null;
  classifications?:
    | {
        primary?: boolean | null;
        segment?: {
          id?: string | null;
          name?: string | null;
        };
        genre?: {
          id?: string | null;
          name?: string | null;
        };
        subGenre?: {
          id?: string | null;
          name?: string | null;
        };
        type?: {
          id?: string | null;
          name?: string | null;
        };
        subType?: {
          id?: string | null;
          name?: string | null;
        };
        family?: boolean | null;
        id?: string | null;
      }[]
    | null;
  links?: {
    self?: {
      href?: string | null;
    };
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events".
 */
export interface Event {
  id: string;
  name: string;
  type?: string | null;
  test?: boolean | null;
  locale?: string | null;
  url?: string | null;
  sales?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  dates?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  attractions?: (string | Attraction)[] | null;
  pleaseNote?: string | null;
  promoter?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  venue?: (string | null) | Venue;
  images?:
    | {
        ratio?: string | null;
        url?: string | null;
        width?: number | null;
        height?: number | null;
        fallback?: boolean | null;
        attribution?: string | null;
        id?: string | null;
      }[]
    | null;
  info?: string | null;
  classifications?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  seatmap?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  accessibility?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  ticketLimit?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  ageRestrictions?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "venues".
 */
export interface Venue {
  id: string;
  name: string;
  type?: string | null;
  locale?: string | null;
  url?: string | null;
  aliases?:
    | {
        alias?: string | null;
        id?: string | null;
      }[]
    | null;
  location?: {
    longitude?: string | null;
    latitude?: string | null;
  };
  images?:
    | {
        ratio?: string | null;
        url?: string | null;
        width?: number | null;
        height?: number | null;
        fallback?: boolean | null;
        id?: string | null;
      }[]
    | null;
  extensions?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  source?: string | null;
  markets?:
    | {
        name?: string | null;
        id?: string | null;
      }[]
    | null;
  timeZone?: string | null;
  address?: {
    line1?: string | null;
  };
  city?: string | null;
  country?: {
    name?: string | null;
    countryCode?: string | null;
  };
  state?: {
    name?: string | null;
    stateCode?: string | null;
  };
  postalCode?: string | null;
  dmas?:
    | {
        id?: string | null;
      }[]
    | null;
  social?: {
    twitter?: {
      handle?: string | null;
    };
  };
  boxOfficeInfo?: {
    phoneNumberDetail?: string | null;
    openHoursDetail?: string | null;
    acceptedPaymentDetail?: string | null;
    willCallDetail?: string | null;
  };
  parkingDetail?: string | null;
  generalInfo?: {
    generalRule?: string | null;
    childRule?: string | null;
  };
  events?: (string | Event)[] | null;
  attractions?: (string | Attraction)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "segments".
 */
export interface Segment {
  id: string;
  name: string;
  genres?:
    | {
        id: string | null;
        name: string;
        subGenres?:
          | {
              id: string | null;
              name: string;
            }[]
          | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'attractions';
        value: string | Attraction;
      } | null)
    | ({
        relationTo: 'events';
        value: string | Event;
      } | null)
    | ({
        relationTo: 'segments';
        value: string | Segment;
      } | null)
    | ({
        relationTo: 'venues';
        value: string | Venue;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "attractions_select".
 */
export interface AttractionsSelect<T extends boolean = true> {
  id?: T;
  name?: T;
  type?: T;
  url?: T;
  locale?: T;
  externalLinks?:
    | T
    | {
        youtube?:
          | T
          | {
              url?: T;
              id?: T;
            };
        twitter?:
          | T
          | {
              url?: T;
              id?: T;
            };
        itunes?:
          | T
          | {
              url?: T;
              id?: T;
            };
        lastfm?:
          | T
          | {
              url?: T;
              id?: T;
            };
        spotify?:
          | T
          | {
              url?: T;
              id?: T;
            };
        facebook?:
          | T
          | {
              url?: T;
              id?: T;
            };
        wiki?:
          | T
          | {
              url?: T;
              id?: T;
            };
        instagram?:
          | T
          | {
              url?: T;
              id?: T;
            };
        musicbrainz?:
          | T
          | {
              id?: T;
              url?: T;
            };
        homepage?:
          | T
          | {
              url?: T;
              id?: T;
            };
      };
  aliases?:
    | T
    | {
        alias?: T;
        id?: T;
      };
  images?:
    | T
    | {
        ratio?: T;
        url?: T;
        width?: T;
        height?: T;
        fallback?: T;
        attribution?: T;
        id?: T;
      };
  classifications?:
    | T
    | {
        primary?: T;
        segment?:
          | T
          | {
              id?: T;
              name?: T;
            };
        genre?:
          | T
          | {
              id?: T;
              name?: T;
            };
        subGenre?:
          | T
          | {
              id?: T;
              name?: T;
            };
        type?:
          | T
          | {
              id?: T;
              name?: T;
            };
        subType?:
          | T
          | {
              id?: T;
              name?: T;
            };
        family?: T;
        id?: T;
      };
  links?:
    | T
    | {
        self?:
          | T
          | {
              href?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events_select".
 */
export interface EventsSelect<T extends boolean = true> {
  id?: T;
  name?: T;
  type?: T;
  test?: T;
  locale?: T;
  url?: T;
  sales?: T;
  dates?: T;
  attractions?: T;
  pleaseNote?: T;
  promoter?: T;
  venue?: T;
  images?:
    | T
    | {
        ratio?: T;
        url?: T;
        width?: T;
        height?: T;
        fallback?: T;
        attribution?: T;
        id?: T;
      };
  info?: T;
  classifications?: T;
  seatmap?: T;
  accessibility?: T;
  ticketLimit?: T;
  ageRestrictions?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "segments_select".
 */
export interface SegmentsSelect<T extends boolean = true> {
  id?: T;
  name?: T;
  genres?:
    | T
    | {
        id?: T;
        name?: T;
        subGenres?:
          | T
          | {
              id?: T;
              name?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "venues_select".
 */
export interface VenuesSelect<T extends boolean = true> {
  id?: T;
  name?: T;
  type?: T;
  locale?: T;
  url?: T;
  aliases?:
    | T
    | {
        alias?: T;
        id?: T;
      };
  location?:
    | T
    | {
        longitude?: T;
        latitude?: T;
      };
  images?:
    | T
    | {
        ratio?: T;
        url?: T;
        width?: T;
        height?: T;
        fallback?: T;
        id?: T;
      };
  extensions?: T;
  source?: T;
  markets?:
    | T
    | {
        name?: T;
        id?: T;
      };
  timeZone?: T;
  address?:
    | T
    | {
        line1?: T;
      };
  city?: T;
  country?:
    | T
    | {
        name?: T;
        countryCode?: T;
      };
  state?:
    | T
    | {
        name?: T;
        stateCode?: T;
      };
  postalCode?: T;
  dmas?:
    | T
    | {
        id?: T;
      };
  social?:
    | T
    | {
        twitter?:
          | T
          | {
              handle?: T;
            };
      };
  boxOfficeInfo?:
    | T
    | {
        phoneNumberDetail?: T;
        openHoursDetail?: T;
        acceptedPaymentDetail?: T;
        willCallDetail?: T;
      };
  parkingDetail?: T;
  generalInfo?:
    | T
    | {
        generalRule?: T;
        childRule?: T;
      };
  events?: T;
  attractions?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}